# Namespace for provisioner
apiVersion: v1
kind: Namespace
metadata:
  name: nfs-provisioner

---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nfs-client-provisioner
  namespace: nfs-provisioner

---
# ClusterRole
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-client-provisioner-runner
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update", "patch"]
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

---
# ClusterRoleBinding
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: run-nfs-client-provisioner
subjects:
  - kind: ServiceAccount
    name: nfs-client-provisioner
    namespace: nfs-provisioner
roleRef:
  kind: ClusterRole
  name: nfs-client-provisioner-runner
  apiGroup: rbac.authorization.k8s.io

---
# StorageClass
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-client
provisioner: example.com/nfs
reclaimPolicy: Retain
allowVolumeExpansion: true
volumeBindingMode: Immediate

---
# NFS provisioner Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nfs-client-provisioner
  namespace: nfs-provisioner
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nfs-client-provisioner
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nfs-client-provisioner
    spec:
      serviceAccountName: nfs-client-provisioner
      containers:
        - name: nfs-client-provisioner
          image: registry.k8s.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2
          volumeMounts:
            - name: nfs-client-root
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME
              value: example.com/nfs
            - name: NFS_SERVER
              value: "172.24.233.227"
            - name: NFS_PATH
              value: "/srv/nfs/kubedata"
      volumes:
        - name: nfs-client-root
          nfs:
            server: "172.24.233.227"
            path: "/srv/nfs/kubedata"

---
# PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-pvc
  namespace: default
spec:
  storageClassName: nfs-client
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
# Test Deployment multitool
apiVersion: apps/v1
kind: Deployment
metadata:
  name: multitool-nfs
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: multitool-nfs
  template:
    metadata:
      labels:
        app: multitool-nfs
    spec:
      containers:
        - name: multitool
          image: praqma/network-multitool
          command: ["/bin/sh", "-c"]
          args:
            - |
              while true; do
                echo "$(date) Hello from multitool!" >> /mnt/nfs/hello.txt;
                echo "----- Current content of hello.txt -----";
                cat /mnt/nfs/hello.txt;
                sleep 5;
              done
          volumeMounts:
            - name: nfs-volume
              mountPath: /mnt/nfs
      volumes:
        - name: nfs-volume
          persistentVolumeClaim:
            claimName: nfs-pvc
